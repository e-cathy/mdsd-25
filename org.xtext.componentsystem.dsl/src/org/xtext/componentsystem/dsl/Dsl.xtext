// automatically generated by Xtext
grammar org.xtext.componentsystem.dsl.Dsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/MDSDComponentMetamodel" 
import "platform:/resource/MDSDComponentMetamodel/model/MDSDComponentMetamodel.ecore#//SystemIndependant" as SystemIndependant
import "platform:/resource/MDSDComponentMetamodel/model/MDSDComponentMetamodel.ecore#//SystemDependant" as SystemDependant
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ComponentSystem returns ComponentSystem:
	'ComponentSystem'
	'{'
		'repository' '{' repository+=Repository ( "," repository+=Repository)* '}' 
		('system' '{' system+=System ( "," system+=System)* '}' )?
	'}';





Type returns SystemIndependant::Type:
	ComplexType | SimpleType;





Action returns SystemIndependant::Action:
	ExternalCall | InternalAction | Branch | Loop;










Component returns SystemIndependant::Component:
	BasicComponent;


Repository returns SystemIndependant::Repository:
	{SystemIndependant::Repository}
	'Repository'
	'{'
		('components' '{' components+=BasicComponent ( "," components+=BasicComponent)* '}' )?
		('interfaces' '{' interfaces+=Interface ( "," interfaces+=Interface)* '}' )?
		('types' '{' types+=Type ( "," types+=Type)* '}' )?
	'}';

System returns SystemDependant::System:
	'System'
	'{'
		'interfaces' '(' interfaces+=[SystemIndependant::Interface|EString] ( "," interfaces+=[SystemIndependant::Interface|EString])* ')' 
		'assembly' assembly=Assembly
		'allocation' allocation=Allocation
		'environment' environment=Environment
	'}';

BasicComponent returns SystemIndependant::BasicComponent:
	{SystemIndependant::BasicComponent}
	'BasicComponent'
	name=EString
	'{'
		('providedInterfaces' '(' providedInterfaces+=[SystemIndependant::Interface|EString] ( "," providedInterfaces+=[SystemIndependant::Interface|EString])* ')' )?
		('requiredInterfaces' '(' requiredInterfaces+=[SystemIndependant::Interface|EString] ( "," requiredInterfaces+=[SystemIndependant::Interface|EString])* ')' )?
		('providedServices' '{' providedServices+=Service ( "," providedServices+=Service)* '}' )?
		('behaviorDescription' '{' behaviorDescription+=Action ( "," behaviorDescription+=Action)* '}' )?
	'}';

Interface returns SystemIndependant::Interface:
	{SystemIndependant::Interface}
	'Interface'
	name=EString
	'{'
		('signatures' '{' signatures+=Signature ( "," signatures+=Signature)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

Service returns SystemIndependant::Service:
	'Service'
	name=EString
	'{'
		'correspondingSignature' correspondingSignature=[SystemIndependant::Signature|EString]
	'}';

Signature returns SystemIndependant::Signature:
	{SystemIndependant::Signature}
	'Signature'
	name=EString
	'{'
		('returnType' returnType=[SystemIndependant::Type|EString])?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Parameter returns SystemIndependant::Parameter:
	'Parameter'
	name=EString
	'{'
		'type' type=[SystemIndependant::Type|EString]
	'}';

ExternalCall returns SystemIndependant::ExternalCall:
	{SystemIndependant::ExternalCall}
	'ExternalCall'
	name=EString;

InternalAction returns SystemIndependant::InternalAction:
	{SystemIndependant::InternalAction}
	'InternalAction'
	name=EString;

Branch returns SystemIndependant::Branch:
	'Branch'
	name=EString
	'{'
		'condition' condition=EString
		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
	'}';

Loop returns SystemIndependant::Loop:
	'Loop'
	name=EString
	'{'
		'condition' condition=EString
		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
	'}';

ComplexType returns SystemIndependant::ComplexType:
	'ComplexType'
	name=EString
	'{'
		'type' type=EJavaClass
	'}';

SimpleType returns SystemIndependant::SimpleType:
	'SimpleType'
	name=EString
	'{'
		'type' type=SimpleTypeEnum
	'}';

EJavaClass returns ecore::EJavaClass:
	'EJavaClass' /* TODO: implement this rule and an appropriate IValueConverter */;

enum SimpleTypeEnum returns SystemIndependant::SimpleTypeEnum:
				Boolean = 'Boolean' | Char = 'Char' | Date = 'Date' | Double = 'Double' | Float = 'Float' | List = 'List' | Int = 'Int' | Long = 'Long' | Map = 'Map' | String = 'String';

Assembly returns SystemDependant::Assembly:
	{SystemDependant::Assembly}
	'Assembly'
	'{'
		('assemblyContexts' '{' assemblyContexts+=AssemblyContext ( "," assemblyContexts+=AssemblyContext)* '}' )?
		('compositeComponents' '{' compositeComponents+=CompositeComponent ( "," compositeComponents+=CompositeComponent)* '}' )?
		('assemblyConnectors' '{' assemblyConnectors+=AssemblyConnector ( "," assemblyConnectors+=AssemblyConnector)* '}' )?
		('delegationConnectors' '{' delegationConnectors+=DelegationConnector ( "," delegationConnectors+=DelegationConnector)* '}' )?
	'}';

Allocation returns SystemDependant::Allocation:
	{SystemDependant::Allocation}
	'Allocation'
	'{'
		('allocationContexts' '{' allocationContexts+=AllocationContext ( "," allocationContexts+=AllocationContext)* '}' )?
	'}';

Environment returns SystemDependant::Environment:
	{SystemDependant::Environment}
	'Environment'
	'{'
		('links' '{' links+=Link ( "," links+=Link)* '}' )?
		('containers' '{' containers+=Container ( "," containers+=Container)* '}' )?
	'}';

AssemblyContext returns SystemDependant::AssemblyContext:
	'AssemblyContext'
	name=EString
	'{'
		'component' component=[SystemIndependant::Component|EString]
		('allocationContext' allocationContext=[SystemDependant::AllocationContext|EString])?
		('providedRoles' '{' providedRoles+=Role ( "," providedRoles+=Role)* '}' )?
		('requiredRoles' '{' requiredRoles+=Role ( "," requiredRoles+=Role)* '}' )?
	'}';

CompositeComponent returns SystemDependant::CompositeComponent:
	'CompositeComponent'
	name=EString
	'{'
		('providedInterfaces' '(' providedInterfaces+=[SystemIndependant::Interface|EString] ( "," providedInterfaces+=[SystemIndependant::Interface|EString])* ')' )?
		('requiredInterfaces' '(' requiredInterfaces+=[SystemIndependant::Interface|EString] ( "," requiredInterfaces+=[SystemIndependant::Interface|EString])* ')' )?
		('providedServices' '{' providedServices+=Service ( "," providedServices+=Service)* '}' )?
		('behaviorDescription' '{' behaviorDescription+=Action ( "," behaviorDescription+=Action)* '}' )?
		'assemblyContexts' '{' assemblyContexts+=AssemblyContext ( "," assemblyContexts+=AssemblyContext)* '}' 
		('assemblyConnectors' '{' assemblyConnectors+=AssemblyConnector ( "," assemblyConnectors+=AssemblyConnector)* '}' )?
		('delegationConnectors' '{' delegationConnectors+=DelegationConnector ( "," delegationConnectors+=DelegationConnector)* '}' )?
	'}';

AssemblyConnector returns SystemDependant::AssemblyConnector:
	'AssemblyConnector'
	name=EString
	'{'
		'providedRole' providedRole=[SystemDependant::Role|EString]
		'requiredRole' requiredRole=[SystemDependant::Role|EString]
	'}';

DelegationConnector returns SystemDependant::DelegationConnector:
	'DelegationConnector'
	name=EString
	'{'
		'role' role=[SystemDependant::Role|EString]
		'delegatedInterface' delegatedInterface=[SystemIndependant::Interface|EString]
	'}';

Role returns SystemDependant::Role:
	'Role'
	name=EString
	'{'
		'interface' interface=[SystemIndependant::Interface|EString]
	'}';

AllocationContext returns SystemDependant::AllocationContext:
	'AllocationContext'
	name=EString
	'{'
		'container' container=[SystemDependant::Container|EString]
		'assemblyContext' assemblyContext=[SystemDependant::AssemblyContext|EString]
	'}';

Container returns SystemDependant::Container:
	{SystemDependant::Container}
	'Container'
	name=EString
	'{'
		('links' '(' links+=[SystemDependant::Link|EString] ( "," links+=[SystemDependant::Link|EString])* ')' )?
	'}';

Link returns SystemDependant::Link:
	'Link'
	name=EString
	'{'
		'containers' '(' containers+=[SystemDependant::Container|EString] ( "," containers+=[SystemDependant::Container|EString])* ')' 
	'}';
