modeltype pcm uses "http://palladiosimulator.org/PalladioComponentModel/5.2";
modeltype componentSystem uses "http://www.example.org/MDSDComponentMetamodel";

transformation ComponentSystem2PCM(in source: componentSystem, out target: pcm);

main() {
	// TODO
	source.objectsOfType(ComponentSystem);
	source.rootObjects()->selectByKind(componentSystem::SystemIndependant::Repository)->Repo2Repo();
}

abstract mapping componentSystem::NamedElement :: Named2Named() : pcm::core::entity::NamedElement {
	result.entityName := self.name;
}

-- REPOSITORY --

mapping componentSystem::SystemIndependant::Repository :: Repo2Repo() : pcm::repository::Repository {
	result.components__Repository := self.components->BasicComp2BasicComp();
	result.interfaces__Repository := self.interfaces->Interface2OpInterface();
	result.dataTypes__Repository := self.types->Type2DataType();
}

mapping componentSystem::SystemIndependant::Component :: Comp2RepoComp() : pcm::repository::RepositoryComponent disjuncts 
componentSystem::SystemIndependant::BasicComponent :: BasicComp2BasicComp,
componentSystem::SystemDependant::CompositeComponent :: CompComp2CompComp;

abstract mapping componentSystem::SystemIndependant::Component :: AbstractComp2RepoComp() : pcm::repository::RepositoryComponent 
inherits componentSystem::NamedElement::Named2Named {
	result.providedRoles_InterfaceProvidingEntity := self.providedInterfaces->Interface2OpInterface();
	result.requiredRoles_InterfaceRequiringEntity := self.requiredInterfaces->Interface2OpInterface();
}

mapping componentSystem::SystemIndependant::BasicComponent :: BasicComp2BasicComp() : pcm::repository::BasicComponent 
inherits componentSystem::SystemIndependant::Component::AbstractComp2RepoComp {

}

mapping componentSystem::SystemIndependant::Interface :: Interface2OpInterface() : pcm::repository::OperationInterface
inherits componentSystem::NamedElement::Named2Named {
	result.signatures__OperationInterface := self.signatures->Signature2OpSignature();
}

mapping componentSystem::SystemIndependant::Signature :: Signature2OpSignature() : pcm::repository::OperationSignature
inherits componentSystem::NamedElement::Named2Named {
	result.parameters__OperationSignature := self.parameters->Param2Param();
	result.returnType__OperationSignature := self.returnType.map Type2DataType();
}

mapping componentSystem::SystemIndependant::Parameter :: Param2Param() : pcm::repository::Parameter {
	result.parameterName := self.name;
	result.dataType__Parameter := self.type.map Type2DataType();
}

mapping componentSystem::SystemIndependant::Type :: Type2DataType() : pcm::repository::DataType disjuncts
componentSystem::SystemIndependant::SimpleType :: SimpleType2PrimDataType,
componentSystem::SystemIndependant::ComplexType :: ComplexType2CompDataType;

mapping componentSystem::SystemIndependant::SimpleType :: SimpleType2PrimDataType() : pcm::repository::PrimitiveDataType {
	result.type := mapTypeEnum(self.type);
}

mapping componentSystem::SystemIndependant::ComplexType :: ComplexType2CompDataType() : pcm::repository::CompositeDataType 
inherits componentSystem::NamedElement::Named2Named {
	result.innerDeclaration_CompositeDataType := self.attributes->Param2InnerDeclaration();
}

mapping componentSystem::SystemIndependant::Parameter :: Param2InnerDeclaration() : pcm::repository::InnerDeclaration {
	result.datatype_InnerDeclaration := self.type.map Type2DataType();
}

helper mapTypeEnum(st : componentSystem::SystemIndependant::SimpleTypeEnum) : pcm::repository::PrimitiveTypeEnum {
	if (st = componentSystem::SystemIndependant::SimpleTypeEnum::Int) then
		return pcm::repository::PrimitiveTypeEnum::INT
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::String) then
		return pcm::repository::PrimitiveTypeEnum::STRING
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Boolean) then
		return pcm::repository::PrimitiveTypeEnum::BOOL
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Double) then
		return pcm::repository::PrimitiveTypeEnum::DOUBLE
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Char) then
		return pcm::repository::PrimitiveTypeEnum::CHAR
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Long) then
		return pcm::repository::PrimitiveTypeEnum::LONG
	else
		return null
	endif
}

-- SYSTEM --
mapping componentSystem::SystemDependant::System :: Sys2Sys() : pcm::system::System {
	init {
		result := self.assembly.map Assembly2Sys();
	}
	
}

-- ASSEMBLY --

abstract mapping componentSystem::SystemDependant::Assembly :: Assembly2CompStructure() : pcm::core::composition::ComposedStructure {
	result.assemblyContexts__ComposedStructure := self.assembly.assemblyContexts->AssemblyCont2AssemblyCont();
	var delegation_connectors := self.assembly.delegationConnectors -> map DelegationConn2Conn();
	var assembly_connectors := self.assembly.assemblyConnectors->AssemblyConn2AssemblyConn();
	result.connectors__ComposedStructure := delegation_connectors -> union(assembly_connectors);
}

mapping componentSystem::SystemDependant::Assembly :: Assembly2Sys() : pcm::system::System 
inherits componentSystem::SystemDependant::Assembly::Assembly2CompStructure{
	
}

mapping componentSystem::SystemDependant::AssemblyContext :: AssemblyCont2AssemblyCont() : pcm::core::composition::AssemblyContext 
inherits componentSystem::NamedElement::Named2Named {
	result.encapsulatedComponent__AssemblyContext := self.component.map Comp2RepoComp();
}

mapping componentSystem::SystemDependant::CompositeComponent :: CompComp2CompComp() : pcm::repository::CompositeComponent
inherits componentSystem::SystemIndependant::Component::AbstractComp2RepoComp {
	result.assemblyContexts__ComposedStructure := self.assemblyContexts->AssemblyCont2AssemblyCont();
	var delegation_connectors := self.delegationConnectors -> map DelegationConn2Conn();
	var assembly_connectors := self.assemblyConnectors->AssemblyConn2AssemblyConn();
	result.connectors__ComposedStructure := delegation_connectors -> union(assembly_connectors);
}

mapping componentSystem::SystemDependant::AssemblyConnector :: AssemblyConn2AssemblyConn() : pcm::core::composition::AssemblyConnector
inherits componentSystem::NamedElement::Named2Named {
	result.providedRole_AssemblyConnector := self.providedRole.map Role2ProvidedRole();
	result.requiredRole_AssemblyConnector := self.requiredRole.map Role2RequiredRole();
}

mapping componentSystem::SystemDependant::DelegationConnector :: DelegationConn2Conn() : pcm::core::composition::DelegationConnector {
	init {
        if self.role.providedAssemblyContext <> null then {
            result := object pcm::core::composition::ProvidedDelegationConnector {
                innerProvidedRole_ProvidedDelegationConnector := self.role.map Role2ProvidedRole();
                outerProvidedRole_ProvidedDelegationConnector := self.delegatedInterface.map Interface2Role();
            };
        } elif self.role.requiredAssemblyContext <> null then {
            result := object pcm::core::composition::RequiredDelegationConnector {
                innerRequiredRole_RequiredDelegationConnector := self.role.map Role2RequiredRole();
                outerRequiredRole_RequiredDelegationConnector := self.delegatedInterface.map Interface2Role();
            };
        } endif;
    }
}

mapping componentSystem::SystemDependant::Role :: Role2Role() : pcm::repository::Role disjuncts
componentSystem::SystemDependant::Role :: Role2ProvidedRole,
componentSystem::SystemDependant::Role :: Role2RequiredRole;

mapping componentSystem::SystemDependant::Role :: Role2ProvidedRole() : pcm::repository::OperationProvidedRole when {
	self.providedAssemblyContext <> null;
}{
	result.providedInterface__OperationProvidedRole := self.interface.map Interface2OpInterface();
}

mapping componentSystem::SystemDependant::Role :: Role2RequiredRole() : pcm::repository::OperationRequiredRole when {
	self.requiredAssemblyContext <> null;
}{
	result.requiredInterface__OperationRequiredRole := self.interface.map Interface2OpInterface();
}

-- ALLOCATION --



-- ENVIRONMENT --

mapping componentSystem::SystemDependant::Environment :: Env2ResourceEnv() : pcm::resourceenvironment::ResourceEnvironment {
	result.linkingResources__ResourceEnvironment := self.links->Link2LinkingResource();
	result.resourceContainer_ResourceEnvironment := self.containers->Cont2ResourceCont();
}

mapping componentSystem::SystemDependant::Container :: Cont2ResourceCont() : pcm::resourceenvironment::ResourceContainer
inherits componentSystem::NamedElement::Named2Named {}

mapping componentSystem::SystemDependant::Link :: Link2LinkingResource() : pcm::resourceenvironment::LinkingResource 
inherits componentSystem::NamedElement::Named2Named {
	result.connectedResourceContainers_LinkingResource := self.containers->Cont2ResourceCont();
}