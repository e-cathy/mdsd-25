modeltype pcm uses "http://palladiosimulator.org/PalladioComponentModel/5.2";
modeltype componentSystem uses "http://www.example.org/MDSDComponentMetamodel";

transformation ComponentSystem2PCM(in source: componentSystem, out target: pcm);

property compositeRepository : pcm::repository::Repository;

main() {
	var root = source.rootObjects()[ComponentSystem];
	if (root <> null) {
		root.repositories -> map Repo2Repo();
		compositeRepository := object pcm::repository::Repository {
			entityName := "GeneratedCompositeRespository";
			repositoryDescription := "Contains the composite components as they were not assigned to a repository in the source model."
		};
		var systems = root.systems;
		systems -> map Sys2Sys();
		systems -> environment -> map Env2ResourceEnv();
		systems->forEach(sys) {
    		sys.allocation.map Alloc2Alloc(sys.map Sys2Sys(), sys.environment.map Env2ResourceEnv());
		};
	} endif;
}

abstract mapping componentSystem::NamedElement :: Named2Named() : pcm::core::entity::NamedElement {
	result.entityName := self.name;
}

-- REPOSITORY --

mapping componentSystem::SystemIndependant::Repository :: Repo2Repo() : pcm::repository::Repository {
	result.components__Repository := self.components->BasicComp2BasicComp(result);
	result.interfaces__Repository := self.interfaces->Interface2OpInterface();
	result.dataTypes__Repository := self.types->Type2DataType();
	result.entityName := "repository";
}

mapping componentSystem::SystemIndependant::BasicComponent :: BasicComp2BasicComp(
repo : pcm::repository::Repository
) : pcm::repository::BasicComponent {
	var signatures := self.providedInterfaces->collect(e | e.signatures)->flatten().map Signature2OpSignature();
	result.entityName := self.name;
	result.repository__RepositoryComponent := repo;
	result.providedRoles_InterfaceProvidingEntity := self.providedInterfaces -> map Interface2ProvidedRole(result);
	result.requiredRoles_InterfaceRequiringEntity := self.requiredInterfaces -> map Interface2RequiredRole(result);
	result.serviceEffectSpecifications__BasicComponent := signatures.map Signature2Seff(result);
}

mapping componentSystem::SystemIndependant::Component :: CompInAssembly2RepoComp() : pcm::repository::RepositoryComponent disjuncts 
componentSystem::SystemIndependant::BasicComponent :: BasicCompInAssembly2BasicComp,
componentSystem::SystemDependant::CompositeComponent :: CompComp2CompComp;

mapping componentSystem::SystemIndependant::BasicComponent :: BasicCompInAssembly2BasicComp() : pcm::repository::BasicComponent 
inherits componentSystem::NamedElement::Named2Named {
	init {
		result := self.resolveoneIn(componentSystem::SystemIndependant::BasicComponent :: BasicComp2BasicComp);
	}
}

mapping componentSystem::SystemIndependant::Interface :: Interface2OpInterface() : pcm::repository::OperationInterface
inherits componentSystem::NamedElement::Named2Named {
	result.signatures__OperationInterface := self.signatures->Signature2OpSignature();
}

mapping componentSystem::SystemIndependant::Signature :: Signature2OpSignature() : pcm::repository::OperationSignature
inherits componentSystem::NamedElement::Named2Named {
	result.parameters__OperationSignature := self.parameters -> map Param2Param();
	result.returnType__OperationSignature := self.returnType.map Type2DataType();
}

mapping componentSystem::SystemIndependant::Interface :: Interface2ProvidedRole(
    entity : pcm::core::entity::InterfaceProvidingEntity
) : pcm::repository::OperationProvidedRole {
    init {
    // Try to get already existing instance of role
    var existingRole : pcm::repository::OperationProvidedRole :=
        self.resolveoneIn(componentSystem::SystemIndependant::Interface::Interface2ProvidedRole);
        if (existingRole <> null) and (existingRole.providingEntity_ProvidedRole = entity) then {
            // Return role if existing to not create duplicated instances
            result := existingRole;
        } else {
            // First instantiation of this role
            result := object pcm::repository::OperationProvidedRole {
                providedInterface__OperationProvidedRole := self.map Interface2OpInterface();
                providingEntity_ProvidedRole := entity;
                entityName := self.name;
            };
        } endif
    }
}

mapping componentSystem::SystemIndependant::Interface :: Interface2RequiredRole(
entity : pcm::core::entity::InterfaceRequiringEntity
) : pcm::repository::OperationRequiredRole {
    init {
    // Try to get already existing instance of role
    var existingRole : pcm::repository::OperationRequiredRole :=
        self.resolveoneIn(componentSystem::SystemIndependant::Interface::Interface2RequiredRole);
        if (existingRole <> null) and (existingRole.requiringEntity_RequiredRole = entity) then {
            // Return role if existing to not create duplicated instances
            result := existingRole;
        } else {
            // First instantiation of this role
            result := object pcm::repository::OperationRequiredRole {
                requiredInterface__OperationRequiredRole := self.map Interface2OpInterface();
                requiringEntity_RequiredRole := entity;
                entityName := self.name;
            };
        } endif;
    }
}

mapping componentSystem::SystemIndependant::Parameter :: Param2Param() : pcm::repository::Parameter {
	result.parameterName := self.name;
	result.dataType__Parameter := self.type.map Type2DataType();
}

mapping componentSystem::SystemIndependant::Type :: Type2DataType() : pcm::repository::DataType disjuncts
componentSystem::SystemIndependant::SimpleType :: SimpleType2PrimDataType,
componentSystem::SystemIndependant::ComplexType :: ComplexType2CompDataType;

mapping componentSystem::SystemIndependant::SimpleType :: SimpleType2PrimDataType() : pcm::repository::PrimitiveDataType {
	result.type := mapTypeEnum(self.type);
}

mapping componentSystem::SystemIndependant::ComplexType :: ComplexType2CompDataType() : pcm::repository::CompositeDataType 
inherits componentSystem::NamedElement::Named2Named {
	result.innerDeclaration_CompositeDataType := self.attributes->Param2InnerDeclaration();
}

mapping componentSystem::SystemIndependant::Parameter :: Param2InnerDeclaration() : pcm::repository::InnerDeclaration {
	result.datatype_InnerDeclaration := self.type.map Type2DataType();
}

helper mapTypeEnum(
st : componentSystem::SystemIndependant::SimpleTypeEnum
) : pcm::repository::PrimitiveTypeEnum {
	if (st = componentSystem::SystemIndependant::SimpleTypeEnum::Int) then
		return pcm::repository::PrimitiveTypeEnum::INT
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::String) then
		return pcm::repository::PrimitiveTypeEnum::STRING
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Boolean) then
		return pcm::repository::PrimitiveTypeEnum::BOOL
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Double) then
		return pcm::repository::PrimitiveTypeEnum::DOUBLE
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Char) then
		return pcm::repository::PrimitiveTypeEnum::CHAR
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Long) then
		return pcm::repository::PrimitiveTypeEnum::LONG
	else
		return null
	endif
}

mapping  pcm::repository::Signature :: Signature2Seff(
comp: pcm::repository::BasicComponent
) : pcm::seff::ResourceDemandingSEFF{
    var start := object pcm::seff::StartAction{
    	entityName := "start"
    };
    var stop := object pcm::seff::StopAction{
    	predecessor_AbstractAction := start;
    	entityName := "stop"
    };
    start.successor_AbstractAction := stop;
    seffTypeID := "-1";
    steps_Behaviour:= Set{start,stop};
    basicComponent_ServiceEffectSpecification:= comp;
    describedService__SEFF:= self;

}

-- SYSTEM --

mapping componentSystem::SystemDependant::System :: Sys2Sys() : pcm::system::System {
		result.entityName := "system";
		result.providedRoles_InterfaceProvidingEntity := self.interfaces -> map Interface2ProvidedRole(result);
		
		self.assembly.map Assembly2Sys(result);
}

-- ASSEMBLY --

abstract mapping componentSystem::SystemDependant::Assembly :: Assembly2CompStructure(
sys: pcm::system::System
) : pcm::core::composition::ComposedStructure {
	result.assemblyContexts__ComposedStructure := self.assemblyContexts->AssemblyCont2AssemblyCont();
	if sys = null then {
		log ("sys is null")
	} endif;
	var delegation_connectors := self.delegationConnectors -> map DelegationConn2Conn(sys);
	var assembly_connectors := self.assemblyConnectors->AssemblyConn2AssemblyConn();
	result.connectors__ComposedStructure := delegation_connectors -> union(assembly_connectors);
}

mapping componentSystem::SystemDependant::Assembly :: Assembly2Sys(
sys: pcm::system::System
) : pcm::system::System 
inherits componentSystem::SystemDependant::Assembly::Assembly2CompStructure{
	init {
		result := sys;
	}
}

mapping componentSystem::SystemDependant::AssemblyContext :: AssemblyCont2AssemblyCont() : pcm::core::composition::AssemblyContext 
inherits componentSystem::NamedElement::Named2Named {
	result.encapsulatedComponent__AssemblyContext := self.component.map CompInAssembly2RepoComp();
}

mapping componentSystem::SystemDependant::CompositeComponent :: CompComp2CompComp() : pcm::repository::CompositeComponent {
	result.entityName := self.name;
	result.providedRoles_InterfaceProvidingEntity := self.providedInterfaces -> map Interface2ProvidedRole(result);
	result.requiredRoles_InterfaceRequiringEntity := self.requiredInterfaces -> map Interface2RequiredRole(result);
	
	result.assemblyContexts__ComposedStructure := self.assemblyContexts->AssemblyCont2AssemblyCont();
	
	var delegation_connectors := self.delegationConnectors -> map DelegationConn2Conn(result);
	var assembly_connectors := self.assemblyConnectors->AssemblyConn2AssemblyConn();
	result.connectors__ComposedStructure := delegation_connectors -> union(assembly_connectors);
	
	result.providedRoles_InterfaceProvidingEntity := self.delegationConnectors -> role -> select(r | r.providedAssemblyContext <> null) -> interface -> map Interface2ProvidedRole(result);
	result.requiredRoles_InterfaceRequiringEntity := self.delegationConnectors -> role -> select(r | r.requiredAssemblyContext <> null) -> interface -> map Interface2RequiredRole(result);
	
	result.repository__RepositoryComponent := compositeRepository;
	compositeRepository.components__Repository += result;
}

mapping componentSystem::SystemDependant::AssemblyConnector :: AssemblyConn2AssemblyConn() : pcm::core::composition::AssemblyConnector {
	result.entityName := self.name;
	// TODO: wrong to pass entity as this is the composing structure (CompComp or Sys)
	result.providedRole_AssemblyConnector := self.providedRole.interface.map Interface2ProvidedRole(self.providedRole.providedAssemblyContext.component.map CompInAssembly2RepoComp());
	result.requiredRole_AssemblyConnector := self.requiredRole.interface.map Interface2RequiredRole(self.requiredRole.requiredAssemblyContext.component.map CompInAssembly2RepoComp());
	result.providingAssemblyContext_AssemblyConnector := self.providedRole.providedAssemblyContext.map AssemblyCont2AssemblyCont();
	result.requiringAssemblyContext_AssemblyConnector := self.requiredRole.requiredAssemblyContext.map AssemblyCont2AssemblyCont();
}

mapping componentSystem::SystemDependant::DelegationConnector :: DelegationConn2Conn(
outerEntity : pcm::core::entity::InterfaceProvidingRequiringEntity
) : pcm::core::composition::DelegationConnector {
    init {
        if self.role.providedAssemblyContext <> null then {
            -- Provided-Delegation
            var innerProv := self.role.interface.map Interface2ProvidedRole(self.role.providedAssemblyContext.component.map CompInAssembly2RepoComp()); 
            var outerProv := self.delegatedInterface.map Interface2ProvidedRole(outerEntity);
            
            result := object pcm::core::composition::ProvidedDelegationConnector {
                innerProvidedRole_ProvidedDelegationConnector := innerProv;
                outerProvidedRole_ProvidedDelegationConnector := outerProv;
                assemblyContext_ProvidedDelegationConnector := 
                    self.role.providedAssemblyContext.map AssemblyCont2AssemblyCont();
            };
            
        } elif self.role.requiredAssemblyContext <> null then {
            -- Required-Delegation
            var innerReq := self.role.interface.map Interface2RequiredRole(self.role.requiredAssemblyContext.component.map CompInAssembly2RepoComp());
            var outerReq := self.delegatedInterface.map Interface2RequiredRole(outerEntity);
            
            result := object pcm::core::composition::RequiredDelegationConnector {
                innerRequiredRole_RequiredDelegationConnector := innerReq;
                outerRequiredRole_RequiredDelegationConnector := outerReq;
                assemblyContext_RequiredDelegationConnector := 
                    self.role.requiredAssemblyContext.map AssemblyCont2AssemblyCont();
            };
        } endif;
    }
    population {
    	result.entityName := self.name;
    }
}

-- ALLOCATION --

mapping componentSystem::SystemDependant::Allocation :: Alloc2Alloc(
sys : pcm::system::System, env : pcm::resourceenvironment::ResourceEnvironment
) : pcm::allocation::Allocation {
	result.allocationContexts_Allocation := self.allocationContexts->AllocContext2AllocContext();
	result.system_Allocation := sys;
	result.targetResourceEnvironment_Allocation := env;
	result.entityName := sys.entityName + "-Allocation";
}

mapping componentSystem::SystemDependant::AllocationContext :: AllocContext2AllocContext() : pcm::allocation::AllocationContext 
inherits componentSystem::NamedElement::Named2Named {
	result.resourceContainer_AllocationContext := self.container.map Cont2ResourceCont();
	result.assemblyContext_AllocationContext := self.assemblyContext.map AssemblyCont2AssemblyCont();
}

-- ENVIRONMENT --

mapping componentSystem::SystemDependant::Environment :: Env2ResourceEnv() : pcm::resourceenvironment::ResourceEnvironment {
	result.linkingResources__ResourceEnvironment := self.links->Link2LinkingResource();
	result.resourceContainer_ResourceEnvironment := self.containers->Cont2ResourceCont();
	result.entityName := "environment";
}

mapping componentSystem::SystemDependant::Container :: Cont2ResourceCont() : pcm::resourceenvironment::ResourceContainer
inherits componentSystem::NamedElement::Named2Named {}

mapping componentSystem::SystemDependant::Link :: Link2LinkingResource() : pcm::resourceenvironment::LinkingResource 
inherits componentSystem::NamedElement::Named2Named {
	result.connectedResourceContainers_LinkingResource := self.containers->Cont2ResourceCont();
	result.communicationLinkResourceSpecifications_LinkingResource := object pcm::resourceenvironment::CommunicationLinkResourceSpecification {
		linkingResource_CommunicationLinkResourceSpecification := result;
		failureProbability := 0.0;
		communicationLinkResourceType_CommunicationLinkResourceSpecification := object pcm::resourcetype::CommunicationLinkResourceType {
			entityName := "commLinkResType";
			resourceRepository_ResourceType := object pcm::resourcetype::ResourceRepository {};
		};
		// TODO: Could not initialize class org.palladiosimulator.pcm.core.impl.PCMRandomVariableImpl...
		// latency_CommunicationLinkResourceSpecification := object pcm::core::PCMRandomVariable{};
		// throughput_CommunicationLinkResourceSpecification := object pcm::core::PCMRandomVariable{};
	}
}