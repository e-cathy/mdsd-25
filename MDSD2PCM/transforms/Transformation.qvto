modeltype pcm uses "http://palladiosimulator.org/PalladioComponentModel/5.2";
modeltype componentSystem uses "http://www.example.org/MDSDComponentMetamodel";
modeltype pcmEnvironment uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype pcmAllocation uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype pcmSystem uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype pcmRepository uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';

transformation ComponentSystem2PCM(in source: componentSystem, out target: pcm);

main() {
	var root = source.rootObjects()[ComponentSystem];
	if (root <> null) {
		var systems = root.systems;
		systems -> map Sys2Sys();
		systems -> environment -> map Env2ResourceEnv();
		systems->forEach(sys) {
    		sys.allocation.map Alloc2Alloc(sys.map Sys2Sys());
		};
		root.repositories -> map Repo2Repo();
	} endif;
}

abstract mapping componentSystem::NamedElement :: Named2Named() : pcm::core::entity::NamedElement {
	result.entityName := self.name;
}

-- REPOSITORY --

mapping componentSystem::SystemIndependant::Repository :: Repo2Repo() : pcm::repository::Repository {
	result.components__Repository := self.components->BasicComp2BasicComp();
	result.interfaces__Repository := self.interfaces->Interface2OpInterface();
	result.dataTypes__Repository := self.types->Type2DataType();
}

mapping componentSystem::SystemIndependant::Component :: Comp2RepoComp() : pcm::repository::RepositoryComponent disjuncts 
componentSystem::SystemIndependant::BasicComponent :: BasicComp2BasicComp,
componentSystem::SystemDependant::CompositeComponent :: CompComp2CompComp;

abstract mapping componentSystem::SystemIndependant::Component :: AbstractComp2RepoComp() : pcm::repository::RepositoryComponent 
inherits componentSystem::NamedElement::Named2Named {
	result.providedRoles_InterfaceProvidingEntity := self.providedInterfaces -> map Interface2ProvidedRole(result);
	result.requiredRoles_InterfaceRequiringEntity := self.requiredInterfaces -> map Interface2RequiredRole(result);
}

mapping componentSystem::SystemIndependant::BasicComponent :: BasicComp2BasicComp() : pcm::repository::BasicComponent 
inherits componentSystem::SystemIndependant::Component::AbstractComp2RepoComp {
	result.serviceEffectSpecifications__BasicComponent := Set{createEmptySEFF(result,null)};
}

mapping componentSystem::SystemIndependant::Interface :: Interface2OpInterface() : pcm::repository::OperationInterface
inherits componentSystem::NamedElement::Named2Named {
	result.signatures__OperationInterface := self.signatures->Signature2OpSignature();
}

mapping componentSystem::SystemIndependant::Signature :: Signature2OpSignature() : pcm::repository::OperationSignature
inherits componentSystem::NamedElement::Named2Named {
	result.parameters__OperationSignature := self.parameters -> map Param2Param();
	result.returnType__OperationSignature := self.returnType.map Type2DataType();
}

mapping componentSystem::SystemIndependant::Interface :: Interface2ProvidedRole(
 entity : pcm::core::entity::InterfaceProvidingEntity) : pcm::repository::OperationProvidedRole
 {
	init {
		result := object pcm::repository::OperationProvidedRole {
			providedInterface__OperationProvidedRole := self.map Interface2OpInterface();
			providingEntity_ProvidedRole := entity;
			entityName := self.name;
		}
	}
}

mapping componentSystem::SystemIndependant::Interface :: Interface2RequiredRole(
 entity : pcm::core::entity::InterfaceRequiringEntity) : pcm::repository::OperationRequiredRole 
 {
	init {
		result := object pcm::repository::OperationRequiredRole {
			requiredInterface__OperationRequiredRole := self.map Interface2OpInterface();
			requiringEntity_RequiredRole := entity;
			entityName := self.name;
		}
	}
}

mapping componentSystem::SystemIndependant::Parameter :: Param2Param() : pcm::repository::Parameter {
	result.parameterName := self.name;
	result.dataType__Parameter := self.type.map Type2DataType();
}

mapping componentSystem::SystemIndependant::Type :: Type2DataType() : pcm::repository::DataType disjuncts
componentSystem::SystemIndependant::SimpleType :: SimpleType2PrimDataType,
componentSystem::SystemIndependant::ComplexType :: ComplexType2CompDataType;

mapping componentSystem::SystemIndependant::SimpleType :: SimpleType2PrimDataType() : pcm::repository::PrimitiveDataType {
	result.type := mapTypeEnum(self.type);
}

mapping componentSystem::SystemIndependant::ComplexType :: ComplexType2CompDataType() : pcm::repository::CompositeDataType 
inherits componentSystem::NamedElement::Named2Named {
	result.innerDeclaration_CompositeDataType := self.attributes->Param2InnerDeclaration();
}

mapping componentSystem::SystemIndependant::Parameter :: Param2InnerDeclaration() : pcm::repository::InnerDeclaration {
	result.datatype_InnerDeclaration := self.type.map Type2DataType();
}

helper mapTypeEnum(st : componentSystem::SystemIndependant::SimpleTypeEnum) : pcm::repository::PrimitiveTypeEnum {
	if (st = componentSystem::SystemIndependant::SimpleTypeEnum::Int) then
		return pcm::repository::PrimitiveTypeEnum::INT
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::String) then
		return pcm::repository::PrimitiveTypeEnum::STRING
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Boolean) then
		return pcm::repository::PrimitiveTypeEnum::BOOL
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Double) then
		return pcm::repository::PrimitiveTypeEnum::DOUBLE
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Char) then
		return pcm::repository::PrimitiveTypeEnum::CHAR
	elif (st = componentSystem::SystemIndependant::SimpleTypeEnum::Long) then
		return pcm::repository::PrimitiveTypeEnum::LONG
	else
		return null
	endif
}

query createEmptySEFF(comp: pcm::repository::BasicComponent, sig: pcm::repository::Signature) : pcm::seff::ResourceDemandingSEFF{
    var start := object pcm::seff::StartAction{};
    var stop := object pcm::seff::StopAction{
    	predecessor_AbstractAction := start;
    };
    start.successor_AbstractAction := stop;
    return object pcm::seff::ResourceDemandingSEFF{
        seffTypeID := "-1";
        steps_Behaviour:= Set{start,stop};
        basicComponent_ServiceEffectSpecification:= comp;
        describedService__SEFF:= sig;
    };
}


-- SYSTEM --
mapping componentSystem::SystemDependant::System :: Sys2Sys() : pcm::system::System {
	init {
		result := self.assembly.map Assembly2Sys(result);
	}
	population {
		result.providedRoles_InterfaceProvidingEntity := self.interfaces -> map Interface2ProvidedRole(result);
	}	
}

-- ASSEMBLY --

abstract mapping componentSystem::SystemDependant::Assembly :: Assembly2CompStructure(sys: pcm::system::System) : pcm::core::composition::ComposedStructure {
	result.assemblyContexts__ComposedStructure := self.assemblyContexts->AssemblyCont2AssemblyCont();
	var delegation_connectors := self.delegationConnectors -> map DelegationConn2Conn(sys);
	var assembly_connectors := self.assemblyConnectors->AssemblyConn2AssemblyConn(sys);
	result.connectors__ComposedStructure := delegation_connectors -> union(assembly_connectors);
}

mapping componentSystem::SystemDependant::Assembly :: Assembly2Sys(sys: pcm::system::System) : pcm::system::System 
inherits componentSystem::SystemDependant::Assembly::Assembly2CompStructure{
	
}

mapping componentSystem::SystemDependant::AssemblyContext :: AssemblyCont2AssemblyCont() : pcm::core::composition::AssemblyContext 
inherits componentSystem::NamedElement::Named2Named {
	result.encapsulatedComponent__AssemblyContext := self.component.map Comp2RepoComp();
}

mapping componentSystem::SystemDependant::CompositeComponent :: CompComp2CompComp() : pcm::repository::CompositeComponent
inherits componentSystem::SystemIndependant::Component::AbstractComp2RepoComp {
	result.assemblyContexts__ComposedStructure := self.assemblyContexts->AssemblyCont2AssemblyCont();
	var delegation_connectors := self.delegationConnectors -> map DelegationConn2Conn(result);
	var assembly_connectors := self.assemblyConnectors->AssemblyConn2AssemblyConn(result);
	result.connectors__ComposedStructure := delegation_connectors -> union(assembly_connectors);
	result.providedRoles_InterfaceProvidingEntity := self.delegationConnectors -> role -> select(r | r.providedAssemblyContext <> null).map Role2ProvidedRole(result);
	result.requiredRoles_InterfaceRequiringEntity := self.delegationConnectors -> role -> select(r | r.requiredAssemblyContext <> null).map Role2RequiredRole(result);
}

mapping componentSystem::SystemDependant::AssemblyConnector :: AssemblyConn2AssemblyConn(entity: pcm::core::entity::InterfaceProvidingRequiringEntity) : pcm::core::composition::AssemblyConnector {
	result.entityName := self.name;
	result.providedRole_AssemblyConnector := self.providedRole.map Role2ProvidedRole(entity);
	result.requiredRole_AssemblyConnector := self.requiredRole.map Role2RequiredRole(entity);
	result.providingAssemblyContext_AssemblyConnector := self.providedRole.providedAssemblyContext.map AssemblyCont2AssemblyCont();
	result.requiringAssemblyContext_AssemblyConnector := self.requiredRole.requiredAssemblyContext.map AssemblyCont2AssemblyCont();
}

mapping componentSystem::SystemDependant::DelegationConnector :: DelegationConn2Conn(entity: pcm::core::entity::InterfaceProvidingRequiringEntity) : pcm::core::composition::DelegationConnector {
	init {
        if self.role.providedAssemblyContext <> null then {
            result := object pcm::core::composition::ProvidedDelegationConnector {
                innerProvidedRole_ProvidedDelegationConnector := self.role.map Role2ProvidedRole(entity);
                outerProvidedRole_ProvidedDelegationConnector := self.delegatedInterface.map Interface2ProvidedRole(entity);
                assemblyContext_ProvidedDelegationConnector := self.role.providedAssemblyContext.map AssemblyCont2AssemblyCont();
            };
        } elif self.role.requiredAssemblyContext <> null then {
            result := object pcm::core::composition::RequiredDelegationConnector {
                innerRequiredRole_RequiredDelegationConnector := self.role.map Role2RequiredRole(entity);
                outerRequiredRole_RequiredDelegationConnector := self.delegatedInterface.map Interface2RequiredRole(entity);
                assemblyContext_RequiredDelegationConnector := self.role.requiredAssemblyContext.map AssemblyCont2AssemblyCont();
            };
        } endif;
    }
}

// Roles are always mapped over their interfaces to make sure that they can be identified
mapping componentSystem::SystemDependant::Role :: Role2ProvidedRole(entity: pcm::core::entity::InterfaceProvidingEntity) : pcm::repository::OperationProvidedRole 
when {
	self.providedAssemblyContext <> null;
}{
	init {
		result := self.interface.map Interface2ProvidedRole(entity);
	}
}

mapping componentSystem::SystemDependant::Role :: Role2RequiredRole(entity: pcm::core::entity::InterfaceRequiringEntity) : pcm::repository::OperationRequiredRole
when {
	self.requiredAssemblyContext <> null;
}{
	init {
		result := self.interface.map Interface2RequiredRole(entity);
	}
}

-- ALLOCATION --

mapping componentSystem::SystemDependant::Allocation :: Alloc2Alloc(sys : pcm::system::System) : pcm::allocation::Allocation {
	result.allocationContexts_Allocation := self.allocationContexts->AllocContext2AllocContext();
	result.system_Allocation := sys;
}

mapping componentSystem::SystemDependant::AllocationContext :: AllocContext2AllocContext() : pcm::allocation::AllocationContext 
inherits componentSystem::NamedElement::Named2Named {
	result.resourceContainer_AllocationContext := self.container.map Cont2ResourceCont();
	result.assemblyContext_AllocationContext := self.assemblyContext.map AssemblyCont2AssemblyCont();
}

-- ENVIRONMENT --

mapping componentSystem::SystemDependant::Environment :: Env2ResourceEnv() : pcm::resourceenvironment::ResourceEnvironment {
	result.linkingResources__ResourceEnvironment := self.links->Link2LinkingResource();
	result.resourceContainer_ResourceEnvironment := self.containers->Cont2ResourceCont();
}

mapping componentSystem::SystemDependant::Container :: Cont2ResourceCont() : pcm::resourceenvironment::ResourceContainer
inherits componentSystem::NamedElement::Named2Named {}

mapping componentSystem::SystemDependant::Link :: Link2LinkingResource() : pcm::resourceenvironment::LinkingResource 
inherits componentSystem::NamedElement::Named2Named {
	result.connectedResourceContainers_LinkingResource := self.containers->Cont2ResourceCont();
	result.communicationLinkResourceSpecifications_LinkingResource := object pcm::resourceenvironment::CommunicationLinkResourceSpecification {
		linkingResource_CommunicationLinkResourceSpecification := result;
		failureProbability := 0.0;
		communicationLinkResourceType_CommunicationLinkResourceSpecification := object pcm::resourcetype::CommunicationLinkResourceType {};
		//latency_CommunicationLinkResourceSpecification := object pcm::core::PCMRandomVariable {
		//	specification := '0.0' 
		//};
		//throughput_CommunicationLinkResourceSpecification := object pcm::core::PCMRandomVariable {
		//	specification := '0.0' 
		//};
	}
}