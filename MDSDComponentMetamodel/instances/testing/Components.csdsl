ComponentSystem {
	repositories {
		Repository Repo {	
			components {
				BasicComponent WebGUI { 
					providedInterfaces ( HTTP )
					requiredInterfaces ( MediaStore ) 
					providedServices {
						Service s for "HTTP.HTTPUpload" , 
						Service s for "HTTP.HTTPDownload"
					}
				} , 
				BasicComponent MediaManager { 
					providedInterfaces ( MediaStore ) 
					requiredInterfaces ( AudioDB , Sound ) 
					providedServices { 
						Service s for "MediaStore.download" , 
						Service s for "MediaStore.upload"
					}
				} , 
				BasicComponent DBCache { 
					providedInterfaces ( AudioDB ) 
					requiredInterfaces ( AudioDB ) 
					providedServices { 
						Service s for "AudioDB.queryDB" , 
						Service s for "AudioDB.addFile"
					}
				} , 
				BasicComponent DigitalWatermarking { 
					providedInterfaces ( Sound ) 
					providedServices { 
						Service s for "Sound.watermark"
					}
				} , 
				BasicComponent PoolingAudioDB { 
					providedInterfaces ( AudioDB ) 
					providedServices { 
						Service s for "AudioDB.queryDB" , 
						Service s for "AudioDB.addFile"
					}
				}
			} 
			interfaces { 
				Interface HTTP { 
					void HTTPDownload ( ) ; 
					void HTTPUpload ( ) ;
				} , 
				Interface MediaStore { 
					void download ( ) ; 
					void upload ( ) ;
				} , 
				Interface Sound { 
					void watermark ( ) ;
				} , 
				Interface AudioDB { 
					void queryDB ( ) ; 
					void addFile ( ) ;
				}
			}
		}
	}
	systems { 
		System { 
			interfaces ( "Repo.HTTP" ) 
			assembly Assembly { 
				assemblyContexts { 
					AssemblyContext PoolingAudioDB { 
						component "Repo.PoolingAudioDB" 
						providedRoles { 
							Role "R AudioDB PA" from "Repo.AudioDB"
						}
					} , 
					AssemblyContext WebGUI { 
						component "Repo.WebGUI" 
						providedRoles { 
							Role "R HTTP WebGUI" from "Repo.HTTP"
						} 
						requiredRoles { 
							Role "R MediaStore WebGUI" from "Repo.MediaStore"
						}
					} , 
					AssemblyContext ^CompositeComponent { 
						component ^CompositeComponent 
						providedRoles { 
							Role "R MediaStore CompComp" from "Repo.MediaStore"
						} 
						requiredRoles { 
							Role "R AudioDB CompComp" from "Repo.AudioDB"
						}
					}
				} compositeComponents { 
					CompositeComponent ^CompositeComponent { 
						providedInterfaces ( "Repo.MediaStore" ) 
						requiredInterfaces ( "Repo.AudioDB" ) 
						assemblyContexts { 
							AssemblyContext MediaManager { 
								component "Repo.MediaManager" 
								providedRoles { 
									Role "R MediaStore MedMan" from "Repo.MediaStore"
								} 
								requiredRoles { 
									Role "R Sound MedMan" from "Repo.Sound" , 
									Role "R AudioDB MedMan" from "Repo.AudioDB"
								}
							} , 
							AssemblyContext DigitalWatermarking { 
								component "Repo.DigitalWatermarking" 
								providedRoles { 
									Role "R Sound Water" from "Repo.Sound"
								}
							} , 
							AssemblyContext DBCache { 
								component "Repo.DBCache" 
								providedRoles { 
									Role "R AudioDB DBCache-p" from "Repo.AudioDB"
								} 
								requiredRoles { 
									Role "R Audio DBCache-r" from "Repo.AudioDB"
								}
							}
						} assemblyConnectors { 
							c3 : "MediaManager.R AudioDB MedMan" -(o- "DBCache.R AudioDB DBCache-p" , 
							c4 : "MediaManager.R Sound MedMan" -(o- "DigitalWatermarking.R Sound Water"
						} delegationConnectors { 
							d2 : "MediaManager.R MediaStore MedMan" -> "Repo.MediaStore" , 
							d3 : "DBCache.R Audio DBCache-r" -> "Repo.AudioDB"
						}
					}
				} assemblyConnectors { 
					c1 : "WebGUI.R MediaStore WebGUI" -(o- "CompositeComponent.R MediaStore CompComp" , 
					c2 : "CompositeComponent.R AudioDB CompComp" -(o- "PoolingAudioDB.R AudioDB PA"
				} delegationConnectors { 
					d1 : "WebGUI.R HTTP WebGUI" -> "Repo.HTTP"
				}
			} allocation Allocation { 
				allocationContexts { 
					AllocationContext a1 { 
						PoolingAudioDB -[]-> DatabaseServer
					} , 
					AllocationContext a2 { 
						^CompositeComponent -[]-> ApplicationServer
					} , 
					AllocationContext a3 { 
						WebGUI -[]-> ApplicationServer
					}
				}
			} environment Environment { 
				links { 
					Link ServerLink { 
						ApplicationServer <=> DatabaseServer
					}
				} containers { 
					Container ApplicationServer, 
					Container DatabaseServer
				}
			}
		}
	} 
}